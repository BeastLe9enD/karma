#include "token_type.hpp"

namespace karmac::token_type {
    std::string_view get_name(TokenType type) noexcept {
        using namespace std::string_view_literals;

        switch (type) {
            case TokenType::LeftBracket:
                return "left_bracket"sv;
            case TokenType::RightBracket:
                return "right_bracket"sv;
            case TokenType::LeftSquareBracket:
                return "left_square_bracket"sv;
            case TokenType::RightSquareBracket:
                return "right_square_bracket"sv;
            case TokenType::LeftCurlyBracket:
                return "left_curly_bracket"sv;
            case TokenType::RightCurlyBracket:
                return "right_curly_bracket"sv;
            case TokenType::Dot:
                return "dot"sv;
            case TokenType::DoubleDot:
                return "double_dot"sv;
            case TokenType::Comma:
                return "comma"sv;
            case TokenType::Colon:
                return "colon"sv;
            case TokenType::DoubleColon:
                return "double_colon"sv;
            case TokenType::Semicolon:
                return "semicolon"sv;
            case TokenType::Assign:
                return "assign"sv;
            case TokenType::Not:
                return "not"sv;
            case TokenType::Arrow:
                return "arrow"sv;
            case TokenType::QuestionMark:
                return "question_mark"sv;
            case TokenType::Less:
                return "less"sv;
            case TokenType::LessEquals:
                return "less_equals"sv;
            case TokenType::Greater:
                return "greater"sv;
            case TokenType::GreaterEquals:
                return "greater_equals"sv;
            case TokenType::Equals:
                return "equals"sv;
            case TokenType::NotEquals:
                return "not_equals"sv;
            case TokenType::Conjunction:
                return "conjunction"sv;
            case TokenType::Disjunction:
                return "disjunction"sv;
            case TokenType::And:
                return "and"sv;
            case TokenType::AndAssign:
                return "and_assign"sv;
            case TokenType::Or:
                return "or"sv;
            case TokenType::OrAssign:
                return "or_assign"sv;
            case TokenType::Xor:
                return "xor"sv;
            case TokenType::XorAssign:
                return "xor_assign"sv;
            case TokenType::LeftShift:
                return "left_shift"sv;
            case TokenType::LeftShiftAssign:
                return "left_shift_assign"sv;
            case TokenType::RightShift:
                return "right_shift"sv;
            case TokenType::RightShiftAssign:
                return "right_shift_assign"sv;
            case TokenType::Increment:
                return "increment"sv;
            case TokenType::Decrement:
                return "decrement"sv;
            case TokenType::Add:
                return "add"sv;
            case TokenType::AddAssign:
                return "add_assign"sv;
            case TokenType::Sub:
                return "sub"sv;
            case TokenType::SubAssign:
                return "sub_assign"sv;
            case TokenType::Mul:
                return "mul"sv;
            case TokenType::MulAssign:
                return "mul_assign"sv;
            case TokenType::Div:
                return "div"sv;
            case TokenType::DivAssign:
                return "div_assign"sv;
            case TokenType::Mod:
                return "mod"sv;
            case TokenType::ModAssign:
                return "mod_assign"sv;
            case TokenType::Identifier:
                return "identifier"sv;
            case TokenType::Fn:
                return "fn"sv;
            case TokenType::If:
                return "if"sv;
            case TokenType::Else:
                return "else"sv;
            case TokenType::For:
                return "for"sv;
            case TokenType::While:
                return "while"sv;
            case TokenType::Break:
                return "break"sv;
            case TokenType::Continue:
                return "continue"sv;
            case TokenType::Return:
                return "return"sv;
            case TokenType::U8Literal:
                return "u8_literal"sv;
            case TokenType::I8Literal:
                return "i8_literal"sv;
            case TokenType::U16Literal:
                return "u16_literal"sv;
            case TokenType::I16Literal:
                return "i16_literal"sv;
            case TokenType::U32Literal:
                return "u32_literal"sv;
            case TokenType::I32Literal:
                return "i32_literal"sv;
            case TokenType::U64Literal:
                return "u64_literal"sv;
            case TokenType::I64Literal:
                return "i64_literal"sv;
            case TokenType::USizeLiteral:
                return "usize_literal"sv;
            case TokenType::ISizeLiteral:
                return "isize_literal"sv;
            case TokenType::F32Literal:
                return "f32_literal"sv;
            case TokenType::F64Literal:
                return "f64_literal"sv;
            case TokenType::StringLiteral:
                return "string_literal"sv;
            default:
                return "[unknown]"sv;
        }
    }

    std::string_view to_string(TokenType type) noexcept {
        using namespace std::string_view_literals;

        switch (type) {
            case TokenType::LeftBracket:
                return "("sv;
            case TokenType::RightBracket:
                return ")"sv;
            case TokenType::LeftSquareBracket:
                return "["sv;
            case TokenType::RightSquareBracket:
                return "]"sv;
            case TokenType::LeftCurlyBracket:
                return "{"sv;
            case TokenType::RightCurlyBracket:
                return "}"sv;
            case TokenType::Dot:
                return "."sv;
            case TokenType::DoubleDot:
                return ".."sv;
            case TokenType::Comma:
                return ","sv;
            case TokenType::Colon:
                return ":"sv;
            case TokenType::DoubleColon:
                return "::"sv;
            case TokenType::Semicolon:
                return ";"sv;
            case TokenType::Assign:
                return "="sv;
            case TokenType::Not:
                return "!"sv;
            case TokenType::Arrow:
                return "->"sv;
            case TokenType::QuestionMark:
                return "?"sv;
            case TokenType::Less:
                return "<"sv;
            case TokenType::LessEquals:
                return "<="sv;
            case TokenType::Greater:
                return ">"sv;
            case TokenType::GreaterEquals:
                return ">="sv;
            case TokenType::Equals:
                return "=="sv;
            case TokenType::NotEquals:
                return "!="sv;
            case TokenType::Conjunction:
                return "&&"sv;
            case TokenType::Disjunction:
                return "||"sv;
            case TokenType::And:
                return "&"sv;
            case TokenType::AndAssign:
                return "&="sv;
            case TokenType::Or:
                return "|"sv;
            case TokenType::OrAssign:
                return "|="sv;
            case TokenType::Xor:
                return "^"sv;
            case TokenType::XorAssign:
                return "^="sv;
            case TokenType::LeftShift:
                return "<<"sv;
            case TokenType::LeftShiftAssign:
                return "<<="sv;
            case TokenType::RightShift:
                return ">>"sv;
            case TokenType::RightShiftAssign:
                return ">>="sv;
            case TokenType::Increment:
                return "++"sv;
            case TokenType::Decrement:
                return "--"sv;
            case TokenType::Add:
                return "+"sv;
            case TokenType::AddAssign:
                return "+="sv;
            case TokenType::Sub:
                return "-"sv;
            case TokenType::SubAssign:
                return "-="sv;
            case TokenType::Mul:
                return "*"sv;
            case TokenType::MulAssign:
                return "*="sv;
            case TokenType::Div:
                return "/"sv;
            case TokenType::DivAssign:
                return "/="sv;
            case TokenType::Mod:
                return "%"sv;
            case TokenType::ModAssign:
                return "%="sv;
            case TokenType::Identifier:
                return "identifier"sv;
            case TokenType::Fn:
                return "fn"sv;
            case TokenType::If:
                return "if"sv;
            case TokenType::Else:
                return "else"sv;
            case TokenType::For:
                return "for"sv;
            case TokenType::While:
                return "while"sv;
            case TokenType::Break:
                return "break"sv;
            case TokenType::Continue:
                return "continue"sv;
            case TokenType::Return:
                return "return"sv;
            case TokenType::U8Literal:
                return "u8_literal"sv;
            case TokenType::I8Literal:
                return "i8_literal"sv;
            case TokenType::U16Literal:
                return "u16_literal"sv;
            case TokenType::I16Literal:
                return "i16_literal"sv;
            case TokenType::U32Literal:
                return "u32_literal"sv;
            case TokenType::I32Literal:
                return "i32_literal"sv;
            case TokenType::U64Literal:
                return "u64_literal"sv;
            case TokenType::I64Literal:
                return "i64_literal"sv;
            case TokenType::USizeLiteral:
                return "usize_literal"sv;
            case TokenType::ISizeLiteral:
                return "isize_literal"sv;
            case TokenType::F32Literal:
                return "f32_literal"sv;
            case TokenType::F64Literal:
                return "f64_literal"sv;
            case TokenType::StringLiteral:
                return "string_literal"sv;
            default:
                return "[unknown]"sv;
        }
    }
}