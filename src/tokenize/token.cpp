#include "token.hpp"

namespace karmac::token_type {
    std::string_view get_name(TokenType type) noexcept {
        using namespace std::string_view_literals;

        switch (type) {
            case TokenType::LeftBracket:
                return "left_bracket";
            case TokenType::RightBracket:
                return "right_bracket";
            case TokenType::LeftSquareBracket:
                return "left_square_bracket";
            case TokenType::RightSquareBracket:
                return "right_square_bracket";
            case TokenType::LeftCurlyBracket:
                return "left_curly_bracket";
            case TokenType::RightCurlyBracket:
                return "right_curly_bracket";
            case TokenType::Dot:
                return "dot";
            case TokenType::DoubleDot:
                return "double_dot";
            case TokenType::Comma:
                return "comma";
            case TokenType::Colon:
                return "colon";
            case TokenType::DoubleColon:
                return "double_colon";
            case TokenType::Semicolon:
                return "semicolon";
            case TokenType::Assign:
                return "assign";
            case TokenType::Not:
                return "not";
            case TokenType::Arrow:
                return "arrow";
            case TokenType::QuestionMark:
                return "question_mark";
            case TokenType::Less:
                return "less";
            case TokenType::LessEquals:
                return "less_equals";
            case TokenType::Greater:
                return "greater";
            case TokenType::GreaterEquals:
                return "greater_equals";
            case TokenType::Equals:
                return "equals";
            case TokenType::NotEquals:
                return "not_equals";
            case TokenType::Conjunction:
                return "conjunction";
            case TokenType::Disjunction:
                return "disjunction";
            case TokenType::And:
                return "and";
            case TokenType::AndAssign:
                return "and_assign";
            case TokenType::Or:
                return "or";
            case TokenType::OrAssign:
                return "or_assign";
            case TokenType::Xor:
                return "xor";
            case TokenType::XorAssign:
                return "xor_assign";
            case TokenType::LeftShift:
                return "left_shift";
            case TokenType::LeftShiftAssign:
                return "left_shift_assign";
            case TokenType::RightShift:
                return "right_shift";
            case TokenType::RightShiftAssign:
                return "right_shift_assign";
            case TokenType::Increment:
                return "increment";
            case TokenType::Decrement:
                return "decrement";
            case TokenType::Add:
                return "add";
            case TokenType::AddAssign:
                return "add_assign";
            case TokenType::Sub:
                return "sub";
            case TokenType::SubAssign:
                return "sub_assign";
            case TokenType::Mul:
                return "mul";
            case TokenType::MulAssign:
                return "mul_assign";
            case TokenType::Div:
                return "div";
            case TokenType::DivAssign:
                return "div_assign";
            case TokenType::Mod:
                return "mod";
            case TokenType::ModAssign:
                return "mod_assign";
            case TokenType::Identifier:
                return "identifier";
            case TokenType::Fn:
                return "fn";
            case TokenType::If:
                return "if";
            case TokenType::Else:
                return "else";
            case TokenType::For:
                return "for";
            case TokenType::While:
                return "while";
            case TokenType::Break:
                return "break";
            case TokenType::Continue:
                return "continue";
            case TokenType::Return:
                return "return";
            case TokenType::U8Literal:
                return "u8_literal";
            case TokenType::I8Literal:
                return "i8_literal";
            case TokenType::U16Literal:
                return "u16_literal";
            case TokenType::I16Literal:
                return "i16_literal";
            case TokenType::U32Literal:
                return "u32_literal";
            case TokenType::I32Literal:
                return "i32_literal";
            case TokenType::U64Literal:
                return "u64_literal";
            case TokenType::I64Literal:
                return "i64_literal";
            case TokenType::USizeLiteral:
                return "usize_literal";
            case TokenType::ISizeLiteral:
                return "isize_literal";
            case TokenType::F32Literal:
                return "f32_literal";
            case TokenType::F64Literal:
                return "f64_literal";
            case TokenType::StringLiteral:
                return "string_literal";
            default:
                return "[unknown]"sv;
        }
    }

    std::string_view to_string(TokenType type) noexcept {
        using namespace std::string_view_literals;

        switch (type) {
            case TokenType::LeftBracket:
                return "(";
            case TokenType::RightBracket:
                return ")";
            case TokenType::LeftSquareBracket:
                return "[";
            case TokenType::RightSquareBracket:
                return "]";
            case TokenType::LeftCurlyBracket:
                return "{";
            case TokenType::RightCurlyBracket:
                return "}";
            case TokenType::Dot:
                return ".";
            case TokenType::DoubleDot:
                return "..";
            case TokenType::Comma:
                return ",";
            case TokenType::Colon:
                return ":";
            case TokenType::DoubleColon:
                return "::";
            case TokenType::Semicolon:
                return ";";
            case TokenType::Assign:
                return "=";
            case TokenType::Not:
                return "!";
            case TokenType::Arrow:
                return "->";
            case TokenType::QuestionMark:
                return "?";
            case TokenType::Less:
                return "<";
            case TokenType::LessEquals:
                return "<=";
            case TokenType::Greater:
                return ">";
            case TokenType::GreaterEquals:
                return ">=";
            case TokenType::Equals:
                return "==";
            case TokenType::NotEquals:
                return "!=";
            case TokenType::Conjunction:
                return "&&";
            case TokenType::Disjunction:
                return "||";
            case TokenType::And:
                return "&";
            case TokenType::AndAssign:
                return "&=";
            case TokenType::Or:
                return "|";
            case TokenType::OrAssign:
                return "|=";
            case TokenType::Xor:
                return "^";
            case TokenType::XorAssign:
                return "^=";
            case TokenType::LeftShift:
                return "<<";
            case TokenType::LeftShiftAssign:
                return "<<=";
            case TokenType::RightShift:
                return ">>";
            case TokenType::RightShiftAssign:
                return ">>=";
            case TokenType::Increment:
                return "++";
            case TokenType::Decrement:
                return "--";
            case TokenType::Add:
                return "+";
            case TokenType::AddAssign:
                return "+=";
            case TokenType::Sub:
                return "-";
            case TokenType::SubAssign:
                return "-=";
            case TokenType::Mul:
                return "*";
            case TokenType::MulAssign:
                return "*=";
            case TokenType::Div:
                return "/";
            case TokenType::DivAssign:
                return "/=";
            case TokenType::Mod:
                return "%";
            case TokenType::ModAssign:
                return "%=";
            case TokenType::Identifier:
                return "identifier";
            case TokenType::Fn:
                return "fn";
            case TokenType::If:
                return "if";
            case TokenType::Else:
                return "else";
            case TokenType::For:
                return "for";
            case TokenType::While:
                return "while";
            case TokenType::Break:
                return "break";
            case TokenType::Continue:
                return "continue";
            case TokenType::Return:
                return "return";
            case TokenType::U8Literal:
                return "u8_literal";
            case TokenType::I8Literal:
                return "i8_literal";
            case TokenType::U16Literal:
                return "u16_literal";
            case TokenType::I16Literal:
                return "i16_literal";
            case TokenType::U32Literal:
                return "u32_literal";
            case TokenType::I32Literal:
                return "i32_literal";
            case TokenType::U64Literal:
                return "u64_literal";
            case TokenType::I64Literal:
                return "i64_literal";
            case TokenType::USizeLiteral:
                return "usize_literal";
            case TokenType::ISizeLiteral:
                return "isize_literal";
            case TokenType::F32Literal:
                return "f32_literal";
            case TokenType::F64Literal:
                return "f64_literal";
            case TokenType::StringLiteral:
                return "string_literal";
            default:
                return "[unknown]"sv;
        }
    }
}